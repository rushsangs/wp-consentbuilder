{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;EAAEA;AAAF,IAAqBC,EAAE,CAACC,OAA9B;AACA,MAAM;EAAEC,aAAF;EAAiBC;AAAjB,IAA8CH,EAAE,CAACI,QAAvD;AACA,MAAM;EAAEC;AAAF,IAASL,EAAE,CAACM,IAAlB;AACA,MAAM;EAACC,SAAD;EAAYC;AAAZ,IAA2BR,EAAE,CAACS,UAApC;AACA,MAAM;EAACC,UAAD;EAAaC;AAAb,IAA6BX,EAAE,CAACY,IAAtC;;AAEA,IAAIC,gBAAgB,GAAMC,KAAF,IAAa;EACjC,OACI,kIACI,kEAAC,WAAD;IACA,KAAK,EAAEA,KAAK,CAACC,UADb;IAEA,KAAK,EAAEV,EAAE,CAAC,iBAAD,EAAoB,qBAApB,CAFT,CAGA;;EAHA,EADJ,EAQI;IAAG,IAAI,EAAEL,EAAE,CAACY,IAAH,CAAQI,MAAR,CAAe,aAAf,EAA8BC,sBAA9B,CAAqD,MAArD,EAA6D,mBAA7D,CAAT;IAA4F,MAAM,EAAC,QAAnG;IAA4G,GAAG,EAAC,qBAAhH;IAAsI,EAAE,EAAC;EAAzI,6BARJ,CADJ;AAYH,CAbD,EAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIAlB,cAAc,CAAC,qBAAD,EAAwB;EAClCmB,IAAI,EAAE,QAD4B;EAElCC,MAAM,EAAE,MAAM;IACV,OACI,kIACI,kEAAC,aAAD;MACA,IAAI,EAAC,qBADL;MAEA,KAAK,EAAEd,EAAE,CAAC,cAAD,EAAiB,qBAAjB;IAFT,GAIG,kEAAC,gBAAD,OAJH,CADJ,CADJ;EAUH;AAbiC,CAAxB,CAAd,EAeA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,Q","sources":["webpack://sidebar-preview-pdf/external window [\"wp\",\"element\"]","webpack://sidebar-preview-pdf/webpack/bootstrap","webpack://sidebar-preview-pdf/webpack/runtime/compat get default export","webpack://sidebar-preview-pdf/webpack/runtime/define property getters","webpack://sidebar-preview-pdf/webpack/runtime/hasOwnProperty shorthand","webpack://sidebar-preview-pdf/webpack/runtime/make namespace object","webpack://sidebar-preview-pdf/./src/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// /**\r\n//  * WordPress dependencies.\r\n//  */\r\n//  import { __ } from '@wordpress/i18n';\r\n//  import { TextControl } from '@wordpress/components';\r\n//  import { useEntityProp } from '@wordpress/core-data';\r\n//  import { useSelect } from '@wordpress/data';\r\n//  import { PluginDocumentSettingPanel } from '@wordpress/edit-post';\r\nconst { registerPlugin } = wp.plugins;\r\nconst { PluginSidebar, PluginSidebarMoreMenuItem} = wp.editPost;\r\nconst { __ } = wp.i18n;\r\nconst {PanelBody, TextControl} = wp.components;\r\nconst {withSelect, withDispatch} = wp.data;\r\n\r\nlet PluginMetaFields  = ( props ) => {\r\n    return(\r\n        <>\r\n            <TextControl\r\n            value={props.text_value}\r\n            label={__('Text Meta Field', 'sidebar-preview-pdf')}\r\n            // onChange={}\r\n            >\r\n\r\n            </TextControl>\r\n            <a href={wp.data.select('core/editor').getEditedPostAttribute('meta')[\"prefix_text_field\"]} target=\"_blank\" rel=\"noopener noreferrer\" id=\"pdf-previewer\">Click here to view PDF!</a>\r\n        </>\r\n    )\r\n}\r\n\r\n//trigger select and dispatch\r\n// PluginMetaFields = withSelect(\r\n//     ( select) => {\r\n//         return {\r\n//             text_value: select('core/editor').getEditedPostAttribute('meta')['prefix_text_field']\r\n//         }\r\n//     }\r\n// )(PluginMetaFields);\r\n\r\n\r\n\r\nregisterPlugin('sidebar-preview-pdf', {\r\n    icon: 'smiley',\r\n    render: () => {\r\n        return(\r\n            <>\r\n                <PluginSidebar\r\n                name=\"sidebar-preview-pdf\"\r\n                title={__('Meta Options', 'sidebar-preview-pdf') }\r\n                >\r\n                   <PluginMetaFields />\r\n                </PluginSidebar>\r\n            </>\r\n        )\r\n    }\r\n});\r\n//  const ExamplePluginDocumentSettingPanel = () => {\r\n//      // Get post type.\r\n//      const postType = useSelect(\r\n//          ( select ) => select( 'core/editor' ).getCurrentPostType(),\r\n//          []\r\n//      );\r\n \r\n//      // Get the value of meta and a function for updating meta from useEntityProp.\r\n//      const [ meta, setMeta ] = useEntityProp( 'postType', postType, 'meta' );\r\n \r\n//      // Define which post meta key to read from/save to.\r\n//      const metaKey = 'example_meta_field';\r\n \r\n//      /**\r\n//       * A helper function for getting post meta by key.\r\n//       *\r\n//       * @param {string} key - The meta key to read.\r\n//       * @return {*} - Meta value.\r\n//       */\r\n//      const getPostMeta = ( key ) => meta[ key ] || '';\r\n \r\n//      /**\r\n//       * A helper function for updating post meta that accepts a meta key and meta\r\n//       * value rather than entirely new meta object.\r\n//       *\r\n//       * Important! Don't forget to register_post_meta (see ../index.php).\r\n//       *\r\n//       * @param {string} key   - The meta key to update.\r\n//       * @param {*}      value - The meta value to update.\r\n//       */\r\n//      const setPostMeta = ( key, value ) =>\r\n//          setMeta( {\r\n//              ...meta,\r\n//              [ key ]: value,\r\n//          } );\r\n \r\n//      return (\r\n//          <PluginDocumentSettingPanel\r\n//              name=\"example-07-slotfills-esnext\"\r\n//              title={ __( 'Example Meta Box (ESNext)', 'gutenberg-examples' ) }\r\n//              className=\"example-07-slotfills-esnext\"\r\n//          >\r\n//              <TextControl\r\n//                  label={ __( 'Example Meta Field', 'gutenberg-examples' ) }\r\n//                  value={ getPostMeta( metaKey ) }\r\n//                  onChange={ ( value ) => setPostMeta( metaKey, value ) }\r\n//              />\r\n//          </PluginDocumentSettingPanel>\r\n//      );\r\n//  };\r\n//  registerPlugin( 'example-07-slotfills-esnext', {\r\n//      render: ExamplePluginDocumentSettingPanel,\r\n//  } );"],"names":["registerPlugin","wp","plugins","PluginSidebar","PluginSidebarMoreMenuItem","editPost","__","i18n","PanelBody","TextControl","components","withSelect","withDispatch","data","PluginMetaFields","props","text_value","select","getEditedPostAttribute","icon","render"],"sourceRoot":""}